# -*- coding: utf-8 -*-
# Cardboardlint is a cheap lint solution for pull requests.
# Copyright (C) 2011-2017 The Cardboardlint Development Team
#
# This file is part of Cardboardlint.
#
# Cardboardlint is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Cardboardlint is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
# --
"""Linter for whitespace conventions.

This script checks for three ugly things: tabs, trailing whitespace and trailing newlines.
"""
from __future__ import print_function

import codecs

from cardboardlint.common import Message, matches_filefilter, flag, \
    apply_config_defaults


__all__ = ['linter_whitespace']


DEFAULT_CONFIG = {
    # Filename filter rules
    'filefilter': ['+ *.*'],
    # Names of python packages in the project (no longer searched automatically).
    'packages': [],
}


@flag(static=True)
def linter_whitespace(config, files_lines):
    """Linter for checking whitespace conventions.

    Parameters
    ----------
    config : dict
        Dictionary that contains the configuration for the linter
    files_lines : dict
        Dictionary of filename to the set of line numbers (that have been modified).
        See `run_diff` function in `carboardlinter`.

    Returns
    -------
    messages : list
        The list of messages generated by the external linter.

    """
    config = apply_config_defaults('whitespace', config, DEFAULT_CONFIG)

    # Get all relevant filenames
    filenames = [filename for filename in files_lines
                 if matches_filefilter(filename, config['filefilter'])]

    # Loop over all files and check whitespace in each file.
    messages = []
    for filename in filenames:
        with codecs.open(filename, encoding='utf-8') as f:
            line = None
            lineno = -1
            for lineno, line in enumerate(f):
                charno = line.find('\t')
                if charno >= 0:
                    messages.append(Message(filename, lineno, charno, 'found tab'))
                if line[:-1] != line.rstrip():
                    messages.append(Message(filename, lineno, None, 'found trailing whitespace'))
            if line is not None and len(line.strip()) == 0:
                messages.append(Message(filename, lineno, None, 'found trailing empty line'))
    return messages
