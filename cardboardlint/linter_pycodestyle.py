# Cardboardlint is a cheap lint solution for pull requests.
# Copyright (C) 2011-2017 The Cardboardlint Development Team
#
# This file is part of Cardboardlint.
#
# Cardboardlint is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Cardboardlint is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
# --
"""Linter using pycodestyle.

This test calls the flake program, see http://pycodestyle.pycqa.org
"""

from typing import List

from .linter import Linter
from .message import Message
from .utils import run_command


__all__ = ['LINTER']


DEFAULT_CONFIG = {
    # Filename filter rules
    'filefilter': ['+ *.py', '+ scripts/*'],
    # Optional path to the config file.
    'config': None
}


def lint(config: dict, filenames: List[str], _numproc: int = 1) -> List[Message]:
    """Lint with pycodestyle.

    Parameters
    ----------
    config
        Dictionary that contains the configuration for the linter.
    filenames
        A list of filenames to check.
    _numproc
        The number of processors to use.

    Returns
    -------
    messages
        The list of messages generated by the linter.

    """
    # get pycodestyle version
    command = ['pycodestyle', '--version']
    version_info = run_command(command, verbose=False)[0]
    print('USING              : {0}'.format(version_info))

    def has_failed(returncode, _stdout, _stderr):
        """Determine if pycodestyle ran correctly."""
        return not 0 <= returncode < 2

    messages = []
    if len(filenames) > 0:
        command = ['pycodestyle'] + filenames
        if config['config'] is not None:
            command += ['--config={0}'.format(config['config'])]
        output = run_command(command, has_failed=has_failed)[0]
        if len(output) > 0:
            for line in output.splitlines():
                words = line.split(':')
                messages.append(Message(
                    words[0], int(words[1]), int(words[2]), words[3].strip()))
    return messages


LINTER = Linter('pycodestyle', lint, DEFAULT_CONFIG, language='python')
